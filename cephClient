#!/usr/bin/env ruby
# Copyright (c) 2015-17 Anirvan BASU, INRIA Rennes - Bretagne Atlantique
#
# Licensed under the CeCCIL-B license (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License. 

require 'cute'
require 'logger'
require 'cute/taktuk'
require 'net/sftp'
require 'erb'
require 'socket'
require 'trollop'
require 'json'
require "net/http"
require "uri"
require "fileutils"


g5k = Cute::G5K::API.new()
user = g5k.g5k_user

# Get the script dir
scriptDir = File.expand_path(File.dirname(__FILE__))
# Make the temporary files directory (if not created already)
tempDir = scriptDir + "/.generated"
FileUtils.mkpath(tempDir)
FileUtils.mkpath(tempDir + "/config")

currentConfigFile = ""
if (["--def-conf", "-d"].include?(ARGV[0])  && !ARGV[1].empty? )
   currentConfigFile = ARGV[1] # assign config file location to variable configFile
   ARGV.delete_at(0)    # clean up ARGV array
   ARGV.delete_at(0)
else 
   currentConfigFile = tempDir + "/config/defaults.yml" # config file to be used.
   unless File.exist?(currentConfigFile)
     configFile = scriptDir + "/config/defaults.yml.example" # example config file
     FileUtils.cp(configFile, currentConfigFile)
   end # unless File.exist?
end    # if (["--def-conf", "-d"])

# Populate the hash with default parameters from YAML file.
defaults = begin
  YAML.load(File.open(currentConfigFile))
rescue ArgumentError => e
  puts "Could not parse YAML: #{e.message}"
end


# banner for script
opts = Trollop::options do
  version "ceph5k 0.0.8 (c) 2015-16 Anirvan BASU, INRIA RBA"
  banner <<-EOS
cephClient is a script for creating RBD and FS on clients to access a deployed Ceph cluster.

Usage:
       cephClient [options]
where [options] are:
EOS

  opt :ignore, "Ignore incorrect values"
  opt :jobid, "Oarsub ID of the client job", :default => 0
  opt :site, "Grid 5000 site for deploying Ceph cluster", :type => String, :default => defaults["site"]
  opt :cluster, "Grid 5000 cluster in specified site", :type => String, :default => defaults["cluster"]
  opt :'job-name', "Grid'5000 job name for deployed Ceph cluster", :type => String, :default => defaults["job-name"]
  opt :walltime, "Wall time for Ceph cluster deployed", :type => String, :default => defaults["walltime"]

  opt :release, "Ceph Release name", :type => String, :default => defaults["release"]
  opt :'pool-name', "Pool name on Ceph cluster (userid_ added)", :type => String, :default => defaults["pool-name"]
  opt :'pool-size', "Pool size on Ceph cluster", :default => defaults["poolSize"]
  opt :'rbd-name', "RBD name for Ceph pool (userid_ added)", :type => String, :default => defaults["rbd-name"]
  opt :'rbd-size', "RBD size on Ceph pool", :default => defaults["rbd-size"]
  opt :'file', "File with clients list, same option as in kadeploy3", :type => String, :default => ""
  opt :'file-system', "File System to be formatted on created RBDs", :type => String, :default => defaults["file-system"]
  opt :'mnt-depl', "Mount point for RBD on deployed cluster", :type => String, :default => defaults["mnt-depl"]

  opt :'job-client', "Grid'5000 job name for Ceph clients", :type => String, :default => defaults["job-client"]
  opt :'num-client', "Number of Ceph client(s)", :default => defaults["num-client"]
  opt :'env-client', "G5K environment for client", :type => String, :default => defaults["env-client"]
  opt :'only-deploy', "Only deploy linux but don't configure Ceph client", :default => defaults["only-deploy"]
  opt :'client-pool-name', "Pool name on each Ceph client (userid_ is added)", :type => String, :default => defaults["client-pool-name"]
  opt :'client-pool-size', "Pool size for each Ceph client (~ pool-size / num-clients)", :default => defaults["client-pool-size"]
  opt :'client-rbd-name', "RBD name on each Ceph client (userid_ added)", :type => String, :default => defaults["client-rbd-name"]
  opt :'client-rbd-size', "RBD size for each Ceph client (~ pool-size / num-clients)", :default => defaults["client-pool-size"]

end

# Move CLI arguments into variables. Later change to class attributes.
argJobID = opts[:jobid] # Oarsub ID of the client job. 
argSite = opts[:site] # site name. 
argJobName = opts[:'job-name'] # Grid'5000 job for deployed Ceph cluster. 
argG5KCluster = opts[:cluster] # G5K cluster name if specified. 
argWallTime = opts[:walltime] # walltime for the client reservation.

argRelease = opts[:release] # Ceph release name. 
argPoolName = "#{user}_" + opts[:'pool-name'] # Name of pool to create on clusters.
argPoolSize = opts[:'pool-size'] # Size of pool to create on clusters.
argRBDName = "#{user}_" + opts[:'rbd-name'] # Name of pool to create on clusters.
argRBDSize = opts[:'rbd-size'] # Size of pool to create on clusters.
argFileSystem = opts[:'file-system'] # File System to be formatted on created RBDs.
argMntDepl = opts[:'mnt-depl'] # Mount point for RBD in deployed cluster.

argClientList = opts[:'file'] # File with clients list.
argOnlyDeploy = opts[:'only-deploy'] # Only deploy linux but don't configure Ceph client.
argEnvClient = opts[:'env-client'] # Grid'5000 environment to deploy Ceph clients. 
argJobClient = opts[:'job-client'] # Grid'5000 job name for Ceph clients. 
argNumClient = opts[:'num-client'] # Nodes in Ceph Client cluster.
argClientPoolName = "#{user}_" + opts[:'client-pool-name'] # Pool name on each Ceph client.
argClientRBDName = "#{user}_" + opts[:'client-rbd-name'] # RBD name for each Ceph client.
argClientPoolSize = opts[:'client-pool-size'] # Pool size on each Ceph client.
argClientRBDSize = opts[:'client-rbd-size'] # RBD size for each Ceph client.
# argClientPoolSize = (argPoolSize.to_i / argNumClient.to_i).floor # Calc. pool size automatically.
# argClientRBDSize = (argRBDSize.to_i / argNumClient.to_i).floor # Calc. RBD size automatically.


# Initialise some global variables"
jobCephCluster = nil # Job for deployed Ceph cluster
monitor = "" # Monitor for deployed Ceph cluster
# Get all jobs submitted in a cluster
jobs = g5k.get_my_jobs(argSite, state = "running") 

# get the Ceph deploy job with name "cephDeploy" or argJobName
jobs.each do |job|
   if job["name"] == argJobName # if job exists already, get nodes
      jobCephCluster = job
      monitor = jobCephCluster["assigned_nodes"][0]
   end # if job["name"] == argJobName
end # jobs.each do |job|

# Initialise some global variables
jobCephClient = nil # Ceph client job
clients = [] # Array of client nodes

# If client-list specified in CLI argument, get list of clients & fill variable
unless argClientList.empty?
   clients = File.open(argClientList, 'r'){ |file| 
      file.readlines.collect{ |line| line.chomp }
   } # File.open

   # Recover job details of client-list
   jobs = g5k.get_my_jobs(argSite, state = "running") 

   jobs.each do |job|
      if job["assigned_nodes"] == clients # get job where nodes are same as client-list
         jobCephClient = job
         puts "Ceph client job recovered with nodes: #{clients}"
       end # if job["assigned_nodes"] == clients
   end # jobs.each do |job|

else # when no client-list is specified. Do deployment or start from scratch.

   unless [nil, 0].include?(argJobID)
      # If jobID is specified, get the specific job
      jobCephClient = g5k.get_job(argSite, argJobID)
   else
      # Get all my jobs submitted in a site
      jobs = []
      ["waiting","running"].each do |state|
         jobs += g5k.get_my_jobs(argSite, state)

         # get the job with name "cephClient" or argJobName
         jobs.each do |job|
            if job["name"] == argJobClient # if job exists already, get nodes
               jobCephClient = job
            end # if job["name"] == argJobClient

         end # jobs.each do |job|

      end # ["waiting","running"].each do |state|

   end # if argJobID

   # If job state is "waiting" then wait for resources to be assigned
   unless jobCephClient.nil?

      if jobCephClient["state"] == "waiting"
         begin
            job = g5k.wait_for_job(jobCephClient, :wait_time => 60)
         rescue Cute::G5K::EventTimeout
            puts "Waited too long in site #{argSite}, releasing job #{argJobClient}"
            g5k.release(job)
         end
      end # if jobCephClient["state"] == "waiting"

   else
      # Finally, if job does not yet exist reserve nodes
      jobCephClient = g5k.reserve(:name => argJobClient, :nodes => argNumClient, :site => argSite, :cluster => argG5KCluster, :walltime => argWallTime, :type => :deploy) 

   end # unless jobCephClient.nil?

   # Assign roles to each node
   clients = jobCephClient["assigned_nodes"]

   # Then, deploy the nodes with respective environments
   depCephClient = g5k.deploy(jobCephClient, :nodes => clients, :env => argEnvClient)
   g5k.wait_for_deploy(jobCephClient)

end # unless argClientList.empty?

# At this point Ceph client job was created / fetched
puts "Deploying Ceph clients on nodes: #{clients}" 


# Additionally create a directory for saving details of clients deployed
jobID = jobCephClient["uid"]
clientStateDir = tempDir + "/#{argSite}/#{jobID}"
FileUtils.mkpath(clientStateDir)

# Prepare clients-list-file locally
clientsFile = File.open("#{clientStateDir}/clients-list", "w") do |file|
   clients.each do |client|
      file.puts("#{client}")
   end
end

# Abort script if only Linux deployment flag was set
abort("Linux #{argEnvClient} deployed on clients: #{clients}. \n Clients list file in: #{clientStateDir}/clients-list. \n Rerun script with option -f <nodes list file> to configure Ceph clients.") if argOnlyDeploy


# Abort script if no deployed Ceph cluster
abort("No deployed Ceph cluster found. First deploy Ceph cluster, then run script.") if jobCephCluster.nil?

# Remind where is the deployed Ceph monitor
puts "Deployed Ceph cluster details:"
puts "   monitor on: #{monitor}"


#1 Preflight Checklist
puts "Doing pre-flight checklist..."

# Add Ceph & Extras to each Ceph node ('firefly' is the most complete)
argDebian = argEnvClient.slice(0,6)

# Specify explicit dependencies for Ceph packages 
# See Bug #832714: Ceph from Jessie-backports
aptgetPurgeCmd = ""
aptgetInstallCmd = ""
if argDebian.include? "jessie"
   aptgetPurgeCmd = "apt-get -y autoremove ceph ceph ceph-common libcephfs1 librados2 librbd1 python-ceph && apt-get -y purge ceph ceph-common libcephfs1 librados2 librbd1 python-ceph"
   aptgetInstallCmd = "apt-get -y --force-yes install ceph=0.80.10-2~bpo8+1 chrony ceph-common=0.80.10-2~bpo8+1 python-ceph=0.80.10-2~bpo8+1 librbd1=0.80.10-2~bpo8+1 libcephfs1=0.80.10-2~bpo8+1 librados2=0.80.10-2~bpo8+1"
else 
   aptgetPurgeCmd = "apt-get -y autoremove ceph ceph-common && apt-get -y purge ceph ceph-common"
   aptgetInstallCmd = "apt-get -y update && apt-get -y --force-yes install ceph"
end # if argDebian.include? "jessie"

Cute::TakTuk.start(clients, :user => "root") do |tak|
     tak.exec!("echo deb http://apt.grid5000.fr/ceph5k/#{argDebian}/#{argRelease} / | tee /etc/apt/sources.list.d/ceph.list")
     tak.exec!(aptgetPurgeCmd) # Purge previous ceph packages & dependencies
     tak.exec!(aptgetInstallCmd) # Install ceph packages & dependencies
     tak.loop()
end


# Get ssh_config file from master/monitor
remotePathToConfig = "/root/.ssh/config"
Net::SFTP.start(monitor, 'root') do |sftp|
  sftp.stat(remotePathToConfig) do |response|
puts response
    if response.ok?
      sftp.download!(remotePathToConfig, "#{tempDir}/config/config")
    end # unless response.ok?
  end # sftp.stat(remotePathToConfig)
end

# Append to config file locally, list of nodes for clients
configFile = File.open("#{tempDir}/config/config", "a") do |file|
   clients.each do |client|
      file.puts("Host #{client}")
      file.puts("   Hostname #{client}")
      file.puts("   User root")
      file.puts("   StrictHostKeyChecking no")
   end
end

# Get ssh_config file from master/monitor
Net::SFTP.start(monitor, 'root') do |sftp|
  sftp.download!("/etc/ssh/ssh_config", "#{tempDir}/config/ssh_config")
end

# Copy first updated config for Ceph clients on monitor/master node
ssh_key =  'id_rsa'
Cute::TakTuk.start([monitor], :user => "root") do |tak|
     tak.put("#{tempDir}/config/config", "/root/.ssh/config") # copy the config file to master/monitor
     tak.loop()
end

# Push ssh_config file & ssh public key to all nodes
Cute::TakTuk.start(clients, :user => "root") do |tak|
     tak.put("#{tempDir}/config/ssh_config", "/etc/ssh/ssh_config")
     tak.put("/home/#{user}/.ssh/#{ssh_key}.pub", "/root/.ssh/#{ssh_key}.pub")
     tak.exec!("cat /root/.ssh/#{ssh_key}.pub >> /root/.ssh/authorized_keys")
     tak.loop()
end

# Preflight checklist completed.
puts "Pre-flight checklist completed." + "\n"


# Install & administer clients to Ceph deployed cluster.
puts "Adding following clients to deployed Ceph cluster:"
clients.each do |client|
     clientShort = client.split(".").first
     Cute::TakTuk.start([monitor], :user => "root") do |tak|
          tak.exec!("ceph-deploy install --release #{argRelease} #{clientShort}")
          result = tak.exec!("ceph-deploy --overwrite-conf admin #{clientShort}")
          puts "Added client: #{client}" if result[monitor][:status] == 0
          tak.loop()
     end
end # clients.each do


# Create Ceph pools on deployed cluster.
puts "Creating Ceph pools on deployed cluster ..."
# Create Ceph pools & RBDs
Cute::TakTuk.start(clients, :user => "root") do |tak|
     tak.exec!("modprobe rbd")
     tak.exec!("rados mkpool #{argClientPoolName}")
     tak.exec!("rbd create --image-format 2 #{argClientRBDName} --pool #{argClientPoolName} --size #{argClientRBDSize}")
     tak.loop()
end

# Created Pools & RBDs for Ceph deployed cluster.
puts "Created Ceph pool on deployed cluster as follows :" + "\n"
puts "Pool name: #{argClientPoolName} , RBD Name: #{argClientRBDName} , RBD Size: #{argClientRBDSize} " + "\n"


# Map RBDs and create File Systems.
puts "Mapping RBD in deployed Ceph clusters ..."
Cute::TakTuk.start(clients, :user => "root") do |tak|
     # Map RBD & create FS on deployed cluster
     tak.exec!("rbd map #{argClientRBDName} --pool #{argClientPoolName}")
     tak.exec!("mkfs.#{argFileSystem} -m0 /dev/rbd/#{argClientPoolName}/#{argClientRBDName}")
     tak.loop()
end
# Mapped RBDs & created FS for clients on Ceph deployed cluster.
puts "Mapped RBDs #{argRBDName} for clients on deployed Ceph." + "\n"


# Mount RBDs on Ceph client(s).
puts "Mounting RBDs in deployed Ceph cluster on client(s) ..."
clients.each do |client|
   Cute::TakTuk.start([client], :user => "root") do |tak|

        # mount RBD from deployed cluster
        tak.exec!("umount /dev/rbd/#{argClientPoolName}/#{argClientRBDName} /mnt/#{argMntDepl}")
        tak.exec!("rmdir /mnt/#{argMntDepl}")
        tak.exec!("mkdir /mnt/#{argMntDepl}")
        result = tak.exec!("mount /dev/rbd/#{argClientPoolName}/#{argClientRBDName} /mnt/#{argMntDepl}")
        puts "Mounted RBD as File System on client: #{client}" if result[client][:status] == 0

        tak.loop()
   end
end # clients.each do

