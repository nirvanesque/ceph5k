#!/usr/bin/env ruby
# Copyright (c) 2015-16 Anirvan BASU, INRIA Rennes - Bretagne Atlantique
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License. 

require 'cute'
require 'logger'
require 'cute/taktuk'
require 'net/sftp'
require 'erb'
require 'socket'
require 'trollop'
require 'json'
require "net/http"
require "uri"


g5k = Cute::G5K::API.new()
user = g5k.g5k_user

if (["--def-conf", "-d"].include?(ARGV[0])  && !ARGV[1].empty? )
   configFile = ARGV[1] # assign file location to variable configFile
   ARGV.delete_at(0)    # clean up ARGV array
   ARGV.delete_at(0)
else
   configFile = "ceph5k/config/defaults.yml" # default config file is used.
end    # if (["--def-conf", "-d"])

# Populate the hash with default parameters from YAML file.
defaults = begin
  YAML.load(File.open(configFile))
rescue ArgumentError => e
  puts "Could not parse YAML: #{e.message}"
end

# banner for script
opts = Trollop::options do
  version "ceph5k 0.0.5 (c) 2015-16 Anirvan BASU, INRIA RBA"
  banner <<-EOS
cephFlink is a script for deploying Apache Flink on a deployed Ceph cluster+clients.

Usage:
       cephClient [options]
where [options] are:
EOS

  opt :ignore, "Ignore incorrect values"
  opt :jobid, "Oarsub ID of the client job", :default => 0
  opt :site, "Grid 5000 site for deploying Ceph cluster", :type => String, :default => defaults["site"]
  opt :cluster, "Grid 5000 cluster in specified site", :type => String, :default => defaults["cluster"]
  opt :'job-name', "Grid'5000 job name for deployed Ceph cluster", :type => String, :default => defaults["job-name"]
  opt :walltime, "Wall time for Ceph cluster deployed", :type => String, :default => defaults["walltime"]

  opt :release, "Ceph Release name", :type => String, :default => defaults["release"]
  opt :'pool-name', "Pool name on Ceph cluster (userid_ added)", :type => String, :default => defaults["pool-name"]
  opt :'pool-size', "Pool size on Ceph cluster", :default => defaults["poolSize"]
  opt :'rbd-name', "RBD name for Ceph pool (userid_ added)", :type => String, :default => defaults["rbd-name"]
  opt :'rbd-size', "RBD size on Ceph pool", :default => defaults["rbd-size"]
  opt :'file-system', "File System to be formatted on created RBDs", :type => String, :default => defaults["file-system"]
  opt :'mnt-depl', "Mount point for RBD on deployed cluster", :type => String, :default => defaults["mnt-depl"]

  opt :'job-client', "Grid'5000 job name for Ceph clients", :type => String, :default => defaults["job-client"]
  opt :'env-client', "G5K environment for client", :type => String, :default => defaults["env-client"]
  opt :'num-client', "Nodes in Ceph Client cluster", :default => defaults["num-client"]
  opt :'client-pool-name', "Pool name on each Ceph client (userid_ is added)", :type => String, :default => defaults["client-pool-name"]
  opt :'client-pool-size', "Pool size for each Ceph client (~ pool-size / num-clients)", :default => defaults["client-pool-size"]
  opt :'client-rbd-name', "RBD name on each Ceph client (userid_ added)", :type => String, :default => defaults["client-pool-name"]
  opt :'client-rbd-size', "RBD size for each Ceph client (~ pool-size / num-clients)", :default => defaults["client-pool-size"]

end

# Move CLI arguments into variables. Later change to class attributes.
argJobID = opts[:jobid] # Oarsub ID of the client job. 
argSite = opts[:site] # site name. 
argJobName = opts[:'job-name'] # Grid'5000 job for deployed Ceph cluster. 
argG5KCluster = opts[:cluster] # G5K cluster name if specified. 
argWallTime = opts[:walltime] # walltime for the client reservation.

argRelease = opts[:release] # Ceph release name. 
argPoolName = "#{user}_" + opts[:'pool-name'] # Name of pool to create on clusters.
argPoolSize = opts[:'pool-size'] # Size of pool to create on clusters.
argRBDName = "#{user}_" + opts[:'rbd-name'] # Name of pool to create on clusters.
argRBDSize = opts[:'rbd-size'] # Size of pool to create on clusters.
argFileSystem = opts[:'file-system'] # File System to be formatted on created RBDs.
argMntDepl = opts[:'mnt-depl'] # Mount point for RBD in deployed cluster.

argEnvClient = opts[:'env-client'] # Grid'5000 environment to deploy Ceph clients. 
argJobClient = opts[:'job-client'] # Grid'5000 job name for Ceph clients. 
argNumClient = opts[:'num-clients'] # Nodes in Ceph Client cluster.
argClientPoolName = "#{user}_" + opts[:'client-pool-name'] # Pool name on each Ceph client.
argClientPoolSize = opts[:'client-pool-size'] # Pool size on each Ceph client.
argClientRBDName = "#{user}_" + opts[:'client-rbd-name'] # RBD name for each Ceph client.
argClientRBDSize = opts[:'client-rbd-size'] # RBD size for each Ceph client.


# get the job with name "cephCluster"
jobCephCluster = nil # Job for deployed Ceph cluster
monitor = "" # Monitor for deployed Ceph cluster
# Get all jobs submitted in a cluster
jobs = g5k.get_my_jobs(argSite, state = "running") 

# get the job with name "cephDeploy"
jobs.each do |job|
   if job["name"] == argJobName # if job exists already, get nodes
      jobCephCluster = job
      monitor = jobCephCluster["assigned_nodes"][0]
   end # if job["name"] == argJobName
end # jobs.each do |job|

# Abort script if no deployed Ceph cluster
abort("No deployed Ceph cluster found. First run cephDeploy & cephClient scripts, then run this script.") if jobCephCluster.nil?

# Remind where is the deployed Ceph monitor
puts "Deployed Ceph cluster details:"
puts "   monitor on: #{monitor}" + "\n"


# Next get job for Ceph clients
jobCephClient = nil # Ceph client job
clients = [] # Array of client nodes

unless [nil, 0].include?(argJobID)
   # If jobID is specified, get the specific job
   jobCephClient = g5k.get_job(argSite, argJobID)
else
   # Get all jobs submitted in a cluster
   jobs = g5k.get_my_jobs(argSite, state = "running") 

   # get the job with name "cephClient"
   jobs.each do |job|
      if job["name"] == argJobClient # if client job exists already, get nodes
         jobCephClient = job
         clients = jobCephClient["assigned_nodes"]

      end # if job["name"] == argJobName
   end # jobs.each do |job|
end # if argJobID
# At this point job details were fetched
puts "Ceph client job details recovered." + "\n" if !jobCephClient.nil?

abort("No Ceph client(s) found. First run cephClient script, then run this script.") if jobCephClient.nil?

# At this point Big Data nodes were created or fetched
puts "Big Data job details recovered." + "\n"


# Change to be read/write from YAML file
nodes = jobCephClient["assigned_nodes"]
master = nodes[0] # The first node in the list becomes the master
slaves = nodes - [monitor]

# At this point job was created / fetched
puts "Deploying Big Data cluster as follows:"
puts " All nodes: #{nodes}" 
puts "Master node on: #{master}"
puts "Slave node(s) on: #{slaves}" + "\n"


# ssh key-sharing for password-less access from master node.
puts "ssh key-sharing for password-less access from master node ..."

# Prepare .ssh/config file locally
configFile = File.open("config", "w") do |file|
   nodes.each do |node|
      file.puts("Host #{node}")
      file.puts("   Hostname #{node}")
      file.puts("   User root")
      file.puts("   StrictHostKeyChecking no")
   end
end

# Get ssh_config file from master/monitor
Net::SFTP.start(master, 'root') do |sftp|
  sftp.download!("/etc/ssh/ssh_config", "ssh_config")
end

# In ssh_config file (local) add a line to avoid StrictHostKeyChecking
configFile = File.open("ssh_config", "a") do |file|
   file.puts("    StrictHostKeyChecking no") # append only once
end

# Copy ssh keys & config for Ceph on master node
ssh_key =  'id_rsa'
Cute::TakTuk.start([master], :user => "root") do |tak|
     tak.put("/home/#{user}/.ssh/#{ssh_key}", "/root/.ssh/#{ssh_key}") # copy the config file to master/monitor
     tak.put("/home/#{user}/.ssh/#{ssh_key}.pub", "/root/.ssh/#{ssh_key}.pub") # copy the config file to master/monitor
     tak.put("config", "/root/.ssh/config") # copy the config file to master/monitor
     tak.loop()
end

# Push ssh_config file & ssh public key to all nodes
Cute::TakTuk.start(nodes, :user => "root") do |tak|
     tak.put("ssh_config", "/etc/ssh/ssh_config")
     tak.put("/home/#{user}/.ssh/#{ssh_key}.pub", "/root/.ssh/#{ssh_key}.pub")
     tak.exec!("cat /root/.ssh/#{ssh_key}.pub >> /root/.ssh/authorized_keys")
     tak.loop()
end

# ssh key-sharing completed.
puts "ssh key-sharing completed." + "\n"


# Flink directory setup 
puts "Getting Flink tar and setting up directory ..."

# Push flink tar file to all nodes
flinkDir = "flink-0.10.1"
flinkLink = "http://mirrors.ircam.fr/pub/apache/flink/flink-0.10.1/flink-0.10.1-bin-hadoop1-scala_2.10.tgz"
Cute::TakTuk.start(nodes, :user => "root") do |tak|
     tak.exec!("rm flink.tgz ; rm -rf #{flinkDir}")
     tak.put("/home/abasu/public/flink.tgz", "/root/flink.tgz")
     tak.exec!("tar -xzf /root/flink.tgz")
     tak.loop()
end

# Flink directory setup completed
puts "Flink directory setup completed." + "\n"


# Read template file flink-conf.yaml.erb
template = ERB.new File.new("./ceph5k/flink/flink-conf.yaml.erb").read, nil, "%"
# Write result to config file flink-conf.yaml
flinkFileText = template.result(binding)
File.open("ceph5k/config/flink/flink-conf.yaml", "w") do |file|
   file.write(flinkFileText)
end

# Prepare config file "slaves" locally
slavesFile = File.open("ceph5k/config/flink/slaves", "w") do |file|
   slaves.each do |slave|
      file.puts("#{slave}")
   end
end

# Then put 2 config files to all nodes
Cute::TakTuk.start(nodes, :user => "root") do |tak|
     tak.exec!("rm /root/#{flinkDir}/conf/flink-conf.yaml; rm /root/#{flinkDir}/conf/slaves")
     tak.put("ceph5k/config/flink/flink-conf.yaml", "/root/#{flinkDir}/conf/flink-conf.yaml")
     tak.put("ceph5k/config/flink/slaves", "/root/#{flinkDir}/conf/slaves")
     tak.loop()
end

# Flink config files copied
puts "Flink config files copied." + "\n"


# Starting Flink 
puts "Starting Flink on master node ..."
Cute::TakTuk.start([master], :user => "root") do |tak|
     tak.exec!("/root/#{flinkDir}/bin/start-cluster.sh")
     tak.loop()
end

# Flink started
puts "Flink started on Master node: #{master}" + "\n"
puts "Login to master node to submit jobs!" + "\n"






