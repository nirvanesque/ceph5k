#!/usr/bin/env ruby
# Copyright (c) 2015-17 Anirvan BASU, INRIA Rennes - Bretagne Atlantique
#
# Licensed under the CeCCIL-B license (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License. 

require 'cute'
require 'logger'
require 'cute/taktuk'
require 'net/sftp'
require 'erb'
require 'socket'
require 'trollop'
require 'json'
require "net/http"
require "uri"
require "fileutils"


g5k = Cute::G5K::API.new()
user = g5k.g5k_user

# Get the script dir
scriptDir = File.expand_path(File.dirname(__FILE__))
# Make the temporary files directory (if not created already)
tempDir = scriptDir + "/.generated"
FileUtils.mkpath(tempDir)
FileUtils.mkpath(tempDir + "/config")

# Additionally create a directory for Flink config files
flinkConfDir = tempDir + "/config/flink"
FileUtils.mkpath(flinkConfDir)

currentConfigFile = ""
if (["--def-conf", "-d"].include?(ARGV[0])  && !ARGV[1].empty? )
   currentConfigFile = ARGV[1] # assign config file location to variable configFile
   ARGV.delete_at(0)    # clean up ARGV array
   ARGV.delete_at(0)
else 
   currentConfigFile = tempDir + "/config/defaults.yml" # config file to be used.
   unless File.exist?(currentConfigFile)
     configFile = scriptDir + "/config/defaults.yml.example" # example config file
     FileUtils.cp(configFile, currentConfigFile)
   end # unless File.exist?
end    # if (["--def-conf", "-d"])

# Populate the hash with default parameters from YAML file.
defaults = begin
  YAML.load(File.open(currentConfigFile))
rescue ArgumentError => e
  puts "Could not parse YAML: #{e.message}"
end


# banner for script
opts = Trollop::options do
  version "ceph5k 0.0.8 (c) 2015-16 Anirvan BASU, INRIA RBA"
  banner <<-EOS
cephFlink is a script for deploying Apache Flink on a deployed Ceph cluster+clients.

Usage:
       cephFlink [options]
where [options] are:
EOS

  opt :ignore, "Ignore incorrect values"
  opt :jobid, "Oarsub ID of the client job", :default => 0
  opt :'job-client', "Grid'5000 job name for Ceph clients", :type => String, :default => defaults["job-client"]
  opt :site, "Grid 5000 site for deploying Ceph cluster", :type => String, :default => defaults["client-site"]

  opt :'mnt-depl', "Mount point for RBD on deployed cluster", :type => String, :default => defaults["mnt-depl"]
  opt :'flink-link', "URL link to download Flink binary", :default => "http://apache.crihan.fr/dist/flink/flink-1.1.3/flink-1.1.3-bin-hadoop27-scala_2.11.tgz"

end

# Move CLI arguments into variables. Later change to class attributes.
argJobID = opts[:jobid] # Oarsub ID of the client job. 
argClientSite = opts[:site] # G5K site for Ceph clients. 
argMntDepl = opts[:'mnt-depl'] # Mount point for RBD in deployed cluster.
argJobClient = opts[:'job-client'] # Grid'5000 job name for Ceph clients. 
argFlinkLink = opts[:'flink-link'] # URL link to download Flink binary.


# Get job for Ceph clients
jobCephClient = nil # Ceph client job
clients = [] # Array of client nodes

unless [nil, 0].include?(argJobID)
   # If jobID is specified, get the specific job
   jobCephClient = g5k.get_job(argClientSite, argJobID)
else
   # Get all jobs submitted in a cluster
   jobs = g5k.get_my_jobs(argClientSite, state = "running") 

   # get the job with name "cephClient"
   jobs.each do |job|
      if job["name"] == argJobClient # if client job exists already, get nodes
         jobCephClient = job
         clients = jobCephClient["assigned_nodes"]

      end # if job["name"] == argJobClient
   end # jobs.each do |job|
end # unless [nil, 0].include?(argJobID)

# If no Ceph clients found, abort Flink deployment
abort("No Ceph client(s) found. First run cephClient script, then run this script.") if jobCephClient.nil?


# At this point Big Data nodes were created or fetched
puts "Flink job details recovered."

# Change to be read/write from YAML file
nodes = jobCephClient["assigned_nodes"]
master = nodes[0] # The first node in the list becomes the master
slaves = nodes - [master]

# At this point job was created / fetched
puts "Deploying Flink cluster as follows:"
puts " All nodes: #{nodes}" 
puts "Master node on: #{master}"
puts "Slave node(s) on: #{slaves}"


# ssh key-sharing for password-less access from master node.
puts "ssh key-sharing for password-less access from master node ..."

# Prepare .ssh/config file locally
configFile = File.open("#{tempDir}/config/config", "w") do |file|
   nodes.each do |node|
      file.puts("Host #{node}")
      file.puts("   Hostname #{node}")
      file.puts("   User root")
      file.puts("   StrictHostKeyChecking no")
   end
end

# Get ssh_config file from master/monitor
Net::SFTP.start(master, 'root') do |sftp|
  sftp.download!("/etc/ssh/ssh_config", "#{tempDir}/config/ssh_config")
end

# In ssh_config file (local) add a line to avoid StrictHostKeyChecking
configFile = File.open("#{tempDir}/config/ssh_config", "a") do |file|
   file.puts("    StrictHostKeyChecking no") # append only once
end

# Copy ssh keys & config for Ceph on master node
ssh_key =  'id_rsa'
Cute::TakTuk.start([master], :user => "root") do |tak|
     tak.put("/home/#{user}/.ssh/#{ssh_key}", "/root/.ssh/#{ssh_key}") # copy the config file to master/monitor
     tak.put("/home/#{user}/.ssh/#{ssh_key}.pub", "/root/.ssh/#{ssh_key}.pub") # copy the config file to master/monitor
     tak.put("#{tempDir}/config/config", "/root/.ssh/config") # copy the config file to master/monitor
     tak.loop()
end

# Push ssh_config file & ssh public key to all nodes
Cute::TakTuk.start(nodes, :user => "root") do |tak|
     tak.put("#{tempDir}/config/ssh_config", "/etc/ssh/ssh_config")
     tak.put("/home/#{user}/.ssh/#{ssh_key}.pub", "/root/.ssh/#{ssh_key}.pub")
     tak.exec!("cat /root/.ssh/#{ssh_key}.pub >> /root/.ssh/authorized_keys")
     tak.loop()
end

# ssh key-sharing completed.
puts "ssh key-sharing completed."


# Flink directory setup 
puts "Getting Flink tar and setting up directory ..."

# Push flink tar file to all nodes
flinkDir = "flink"
Cute::TakTuk.start(nodes, :user => "root") do |tak|
     tak.exec!("rm flink.tgz ; rm -rf #{flinkDir} ; mkdir #{flinkDir}")
     tak.put("/home/abasu/public/flink.tgz", "/root/flink.tgz")
     tak.exec!("wget -O flink.tgz #{argFlinkLink}")
     tak.exec!("tar xzf flink.tgz -C #{flinkDir} --strip-components=1")
     tak.loop()
end

# Flink directory setup completed
puts "Flink directory setup completed."


# Read template file flink-conf.yaml.erb
template = ERB.new File.new("./ceph5k/flink/flink-conf.yaml.erb").read, nil, "%"
# Write result to config file flink-conf.yaml
flinkFileText = template.result(binding)
File.open("#{flinkConfDir}/flink-conf.yaml", "w") do |file|
   file.write(flinkFileText)
end

# Prepare config file "slaves" locally
slavesFile = File.open("#{flinkConfDir}/slaves", "w") do |file|
   slaves.each do |slave|
      file.puts("#{slave}")
   end
end

# Then put 2 config files to all nodes
Cute::TakTuk.start(nodes, :user => "root") do |tak|
     tak.exec!("rm /root/#{flinkDir}/conf/flink-conf.yaml; rm /root/#{flinkDir}/conf/slaves")
     tak.put("#{flinkConfDir}/flink-conf.yaml", "/root/#{flinkDir}/conf/flink-conf.yaml")
     tak.put("#{flinkConfDir}/slaves", "/root/#{flinkDir}/conf/slaves")
     tak.loop()
end

# Flink config files copied
puts "Flink config files copied."

# Additionally create a directory for saving details of Flink deployed
jobID = jobCephClient["uid"]
clientStateDir = tempDir + "/#{argClientSite}/#{jobID}"
FileUtils.mkpath(clientStateDir)

# Copy Flink configuration files to Flink state directory
FileUtils.mkpath(clientStateDir + "/flink")
FileUtils.cp("#{flinkConfDir}/flink-conf.yaml", "#{clientStateDir}/flink/flink-conf.yaml")
FileUtils.cp("#{flinkConfDir}/slaves", "#{clientStateDir}/flink/slaves")



# Starting Flink 
puts "Starting Flink on master node ..."
Cute::TakTuk.start([master], :user => "root") do |tak|
     tak.exec!("/root/#{flinkDir}/bin/start-cluster.sh")
     tak.loop()
end

# Flink started
puts "Flink cluster started with Master node: #{master}"
puts "Login to master node to submit jobs!"






